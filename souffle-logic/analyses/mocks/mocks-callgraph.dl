#ifdef USE_BASIC
.decl MyLambdaCallGraphEdge(a:Var, b:Var, c:Var, d:Var, e:Var)
.decl MyLambdaArg(a:Var, b:Var, c:Var, d:Var, e:Var)
.decl CallGraphEdgeNotLambda(s:number, mi:MethodInvocation, t:number, ms:Method)
CallGraphEdgeNotLambda(0, mi, 0, ms) :-
  basic.ResolveInvocation(rv, mi, ms),
  basic.VirtualMethodInvocation_BaseType(mi, rv).
CallGraphEdgeNotLambda(0, mi, 0, ms) :-
  MethodInvocation_Method(mi, ms).
#endif

#ifdef USE_CALLGRAPH
.decl MyLambdaCallGraphEdge(?callerCtx:mainAnalysis.configuration.Context, ?i:MethodInvocation, ?calleeCtx:mainAnalysis.configuration.Context, ?m:Method, ?lambda:mainAnalysis.Lambda)
MyLambdaCallGraphEdge(a,b,c,d,e) :- mainAnalysis.LambdaCallGraphEdge(a,b,c,d,e).
.decl MyLambdaArg(?calleeCtx:mainAnalysis.configuration.Context, ?formal:Var, ?formalType:Type, ?actual:Var, ?invokedynamic:DynamicMethodInvocation_Insn)
MyLambdaArg(a,b,c,d,e) :- mainAnalysis.LambdaArg(a,b,c,d,e).

.decl AnyCallGraphEdge(mi:MethodInvocation, ms:Method)
.decl CallGraphEdgeNotLambda(callerCtx:symbol, mi:MethodInvocation, calleeCtx:symbol, ms:Method)
CallGraphEdgeNotLambda("", mi, "", ms) :-
  AnyCallGraphEdge(mi, ms).

AnyCallGraphEdge(?i, ?m) :- mainAnalysis.CallGraphEdge(_, ?i, _, ?m).
AnyCallGraphEdge(?i, ?m) :- mainAnalysis.InvokedynamicBootCallGraphEdge(_, ?i, _, ?m).
AnyCallGraphEdge(?i, ?m) :- mainAnalysis.MethodHandleCallGraphEdge(_, ?i, _, ?m, _, _).
AnyCallGraphEdge(?i, ?m) :- mainAnalysis.OpaqueCallGraphEdge(?i, ?m).
#ifdef REFLECTION
AnyCallGraphEdge(?from, ?to) :- mainAnalysis.ReflectiveCallGraphEdge(_, ?from, _, ?to).
#endif // REFLECTION
#ifdef TAMIFLEX
AnyCallGraphEdge(?from, ?to) :- mainAnalysis.TamiflexCallGraphEdge(_, ?from, _, ?to).
#endif // TAMIFLEX
#ifdef REFLECTION_DYNAMIC_PROXIES
AnyCallGraphEdge(?from, ?to) :- mainAnalysis.ProxyCallGraphEdge(_, ?from, _, ?to).
#endif // REFLECTION_DYNAMIC_PROXIES
#endif
